// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id               String     @id @default(uuid())
  title            String
  details          String?
  slug             String     @unique
  maximumAttendees Int?       @map("maximum_attendees")
  attendees        Attendee[]

  @@map("events") // o map serve para renomeação, no caso os 2 @@ na frente se refere a tabela inetira, e no caso de 1 @ , se refere ao campo de informação
}

model Attendee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  eventId   String   @map("event_id")

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkIn CheckIn?

  // o @@unique([]), faz uma verificação dentro do db, de 2 parâmetros passados na arr, que determina q só pode existir um registro com os dados passados
  // nesse exemplo usado, só pode existir um email cadastrado dentro desse evento, se outra entrada de id tiver o mesmo registro de email ele não é permitido
  @@unique([eventId, email])
  @@map("attendees")
}

model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId Int      @unique @map("attendee_id")

  @@map("check_ins")
}
